1. 能够使用Junit进行单元测试
	@Test，@Before， @After， @BeforeClass， @AfterClass
2. 能够通过反射技术获取Class字节码对象
	a. 通过对象调用getClass获取
	b. 通过类名.class获取
	c. 通过Class的静态方法forName获取
3. 能够通过反射技术获取构造方法对象，并创建对象。
	获取构造方法：
		getConstrucotrs();
		getConstrucotr(Class...);
4. 能够通过反射获取成员方法对象，并且调用方法。
	获取成员方法：
		getMethods();
		getMethod(String name, Class... paramTyps)
	Method对象表示成员方法。里面的invoke可以让方法执行。
5. 能够说出注解的作用
	注解是给程序看的， 程序可以根据注解完成一些功能。
	@Override：该注解用来验证一个方法是否是重写父类的方法。
	@Test：单元测试的注解
	@FunctionalInterface：用来验证一个接口是否是函数式接口
	@Deprecated： 标记方法已经过时，不推荐使用了
6. 能够自定义注解和使用注解
	定义注解：
		public @interface 注解名 {
		}
	使用注解：
		属性的格式：
        数据类型 属性名();
        数据类型 属性名() default 默认值;

    注解的属性只能是下面几种数据类型：
        1. 八种基本属性类型 byte short int long float double char boolean
        2. String， Class， 枚举， 注解
        3. 以上所有数据类型的一维数组

    注解可以加在类上，方法上，变量上....
    使用格式： @注解名

    使用注解的注意事项：
        1. 如果注解中的属性没有默认值，在使用注解时，必须要给该属性赋值。格式： @注解名(属性名=属性值)
        2. 如果注解中的属性有默认值， 在使用注解时，可以赋值，也可以不赋值。
        3. 如果属性是数组类型， 在给该属性赋值时， 要使用大括号包括。
        4. 如果属性是数组类型， 并且只需要给该属性赋值一个元素，那么可以省略大括号
7. 能够说出常用的元注解及其作用
	@Target： 用来限制注解的使用位置。
	@Retention： 用来限制注解的生命周期。
8. 能够解析注解并获取注解中的数据
	如果要操作类上面的注解，那么可以使用Class调用方法进行操作。
   如果要操作方法上面的注解，那么使用Method调用方法进行操作。
   如果要操作构造方法上面的注解，那么使用Constructor调用方法进行操作。
9. 能够完成注解的MyTest案例
	获取类中所有的方法，判断方法上是否有MyTest注解，如果有就让方法运行。
	
重点：	
	1. 能够使用单元测试。
	2. 能够使用反射获取构造方法并使用。
	3. 能够使用反射获取成员方法并使用。
	4. 能够使用注解。
	
	